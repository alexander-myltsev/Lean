/* 
 *  # API versions   We supports several API versions simultaneously:   - Current **stable** API version is 2.0, version 1.0 is deprecated.   - API version 3.0 is **under development** and subject to change. We plan to freeze this API version at the late 2020.  # Limitations   Current API has the following limitations:   - URL should not be longer than 2000 symbols   - Maximal order depth for both archive and active orders is limited   by settings (1000 by default)  # Authentication  Bridge offers two form of authentication:   - HTTP Basic auth   - [JWT token](https://jwt.io) auth, which can be used as both authorization header and query parameter. Only HS256   (HMAC-SHA256) signature algo is supported. `iss` claim is used to pass clientId, `sub` is for application id. For example,   build JWT from following parts:    header:    ```   { \"alg\": \"HS256\", \"typ\": \"JWT\" }   ```    payload:    ```   {     \"sub\": \"77b378e8-3a30-4f85-9017-e839501f7589\",     \"iss\": \"469a8180-51fb-408f-a1f0-c3775eeb6ade\",     \"iat\": 1481850484,     \"aud\": [       \"feed\",       \"symbols\",       \"ohlc\",       \"crossrates\"     ]   }   ```    base64-encoded and concatenated with dot:    ```   eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3N2IzNzhlOC0zYTMwLTRmODUtOTAxNy1lODM5NTAxZjc1ODkiLCJpc3MiOiI0NjlhODE4MC01MWZiLTQwOGYtYTFmMC1jMzc3NWVlYjZhZGUiLCJpYXQiOjE0ODE4NTA0ODQsImF1ZCI6WyJmZWVkIiwic3ltYm9scyIsIm9obGMiLCJjcm9zc3JhdGVzIl19   ```    and finally signed with shared secret:    ```   eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3N2IzNzhlOC0zYTMwLTRmODUtOTAxNy1lODM5NTAxZjc1ODkiLCJpc3MiOiI0NjlhODE4MC01MWZiLTQwOGYtYTFmMC1jMzc3NWVlYjZhZGUiLCJpYXQiOjE0ODE4NTA0ODQsImF1ZCI6WyJmZWVkIiwic3ltYm9scyIsIm9obGMiLCJjcm9zc3JhdGVzIl19.Byn6aPDoMnaQUSGMnnddj2rI-noP9cQwa8JLJswgNGk   ```  <security-definitions />       
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ILiveFeedAPIApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// get last quote
        /// </summary>
        /// <remarks>
        /// Return the last quote for the specified financial instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request quotes</param>
        /// <param name="level">quote level to request (optional, default to best_price)</param>
        /// <returns>List&lt;QuoteResponse&gt;</returns>
        List<QuoteResponse> GetQuoteLast (string version, string symbolIds, string level = null);

        /// <summary>
        /// get last quote
        /// </summary>
        /// <remarks>
        /// Return the last quote for the specified financial instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request quotes</param>
        /// <param name="level">quote level to request (optional, default to best_price)</param>
        /// <returns>ApiResponse of List&lt;QuoteResponse&gt;</returns>
        ApiResponse<List<QuoteResponse>> GetQuoteLastWithHttpInfo (string version, string symbolIds, string level = null);
        /// <summary>
        /// get quote stream
        /// </summary>
        /// <remarks>
        /// Return the life quote stream for the specified financial instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="accept">Acceptiong stream type data</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request quotes</param>
        /// <param name="level">quote level to request (optional, default to best_price)</param>
        /// <returns>QuoteResponse</returns>
        QuoteResponse GetQuoteStream (string version, string accept, string symbolIds, string level = null);

        /// <summary>
        /// get quote stream
        /// </summary>
        /// <remarks>
        /// Return the life quote stream for the specified financial instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="accept">Acceptiong stream type data</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request quotes</param>
        /// <param name="level">quote level to request (optional, default to best_price)</param>
        /// <returns>ApiResponse of QuoteResponse</returns>
        ApiResponse<QuoteResponse> GetQuoteStreamWithHttpInfo (string version, string accept, string symbolIds, string level = null);
        /// <summary>
        /// get trades stream
        /// </summary>
        /// <remarks>
        /// Return the trades stream for the specified financial instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="accept">Acceptiong stream type data</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request trades</param>
        /// <returns>List&lt;TradeResponse&gt;</returns>
        List<TradeResponse> GetTradesStream (string version, string accept, string symbolIds);

        /// <summary>
        /// get trades stream
        /// </summary>
        /// <remarks>
        /// Return the trades stream for the specified financial instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="accept">Acceptiong stream type data</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request trades</param>
        /// <returns>ApiResponse of List&lt;TradeResponse&gt;</returns>
        ApiResponse<List<TradeResponse>> GetTradesStreamWithHttpInfo (string version, string accept, string symbolIds);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// get last quote
        /// </summary>
        /// <remarks>
        /// Return the last quote for the specified financial instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request quotes</param>
        /// <param name="level">quote level to request (optional, default to best_price)</param>
        /// <returns>Task of List&lt;QuoteResponse&gt;</returns>
        System.Threading.Tasks.Task<List<QuoteResponse>> GetQuoteLastAsync (string version, string symbolIds, string level = null);

        /// <summary>
        /// get last quote
        /// </summary>
        /// <remarks>
        /// Return the last quote for the specified financial instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request quotes</param>
        /// <param name="level">quote level to request (optional, default to best_price)</param>
        /// <returns>Task of ApiResponse (List&lt;QuoteResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QuoteResponse>>> GetQuoteLastAsyncWithHttpInfo (string version, string symbolIds, string level = null);
        /// <summary>
        /// get quote stream
        /// </summary>
        /// <remarks>
        /// Return the life quote stream for the specified financial instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="accept">Acceptiong stream type data</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request quotes</param>
        /// <param name="level">quote level to request (optional, default to best_price)</param>
        /// <returns>Task of QuoteResponse</returns>
        System.Threading.Tasks.Task<QuoteResponse> GetQuoteStreamAsync (string version, string accept, string symbolIds, string level = null);

        /// <summary>
        /// get quote stream
        /// </summary>
        /// <remarks>
        /// Return the life quote stream for the specified financial instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="accept">Acceptiong stream type data</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request quotes</param>
        /// <param name="level">quote level to request (optional, default to best_price)</param>
        /// <returns>Task of ApiResponse (QuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuoteResponse>> GetQuoteStreamAsyncWithHttpInfo (string version, string accept, string symbolIds, string level = null);
        /// <summary>
        /// get trades stream
        /// </summary>
        /// <remarks>
        /// Return the trades stream for the specified financial instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="accept">Acceptiong stream type data</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request trades</param>
        /// <returns>Task of List&lt;TradeResponse&gt;</returns>
        System.Threading.Tasks.Task<List<TradeResponse>> GetTradesStreamAsync (string version, string accept, string symbolIds);

        /// <summary>
        /// get trades stream
        /// </summary>
        /// <remarks>
        /// Return the trades stream for the specified financial instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="accept">Acceptiong stream type data</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request trades</param>
        /// <returns>Task of ApiResponse (List&lt;TradeResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TradeResponse>>> GetTradesStreamAsyncWithHttpInfo (string version, string accept, string symbolIds);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class LiveFeedAPIApi : ILiveFeedAPIApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LiveFeedAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LiveFeedAPIApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LiveFeedAPIApi"/> class
        /// </summary>
        /// <returns></returns>
        public LiveFeedAPIApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LiveFeedAPIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LiveFeedAPIApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// get last quote Return the last quote for the specified financial instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request quotes</param>
        /// <param name="level">quote level to request (optional, default to best_price)</param>
        /// <returns>List&lt;QuoteResponse&gt;</returns>
        public List<QuoteResponse> GetQuoteLast (string version, string symbolIds, string level = null)
        {
             ApiResponse<List<QuoteResponse>> localVarResponse = GetQuoteLastWithHttpInfo(version, symbolIds, level);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get last quote Return the last quote for the specified financial instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request quotes</param>
        /// <param name="level">quote level to request (optional, default to best_price)</param>
        /// <returns>ApiResponse of List&lt;QuoteResponse&gt;</returns>
        public ApiResponse< List<QuoteResponse> > GetQuoteLastWithHttpInfo (string version, string symbolIds, string level = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling LiveFeedAPIApi->GetQuoteLast");
            // verify the required parameter 'symbolIds' is set
            if (symbolIds == null)
                throw new ApiException(400, "Missing required parameter 'symbolIds' when calling LiveFeedAPIApi->GetQuoteLast");

            var localVarPath = "/md/{version}/feed/{symbolIds}/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (symbolIds != null) localVarPathParams.Add("symbolIds", this.Configuration.ApiClient.ParameterToString(symbolIds)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuoteLast", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuoteResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QuoteResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuoteResponse>)));
        }

        /// <summary>
        /// get last quote Return the last quote for the specified financial instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request quotes</param>
        /// <param name="level">quote level to request (optional, default to best_price)</param>
        /// <returns>Task of List&lt;QuoteResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<QuoteResponse>> GetQuoteLastAsync (string version, string symbolIds, string level = null)
        {
             ApiResponse<List<QuoteResponse>> localVarResponse = await GetQuoteLastAsyncWithHttpInfo(version, symbolIds, level);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get last quote Return the last quote for the specified financial instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request quotes</param>
        /// <param name="level">quote level to request (optional, default to best_price)</param>
        /// <returns>Task of ApiResponse (List&lt;QuoteResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QuoteResponse>>> GetQuoteLastAsyncWithHttpInfo (string version, string symbolIds, string level = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling LiveFeedAPIApi->GetQuoteLast");
            // verify the required parameter 'symbolIds' is set
            if (symbolIds == null)
                throw new ApiException(400, "Missing required parameter 'symbolIds' when calling LiveFeedAPIApi->GetQuoteLast");

            var localVarPath = "/md/{version}/feed/{symbolIds}/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (symbolIds != null) localVarPathParams.Add("symbolIds", this.Configuration.ApiClient.ParameterToString(symbolIds)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuoteLast", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuoteResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QuoteResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuoteResponse>)));
        }

        /// <summary>
        /// get quote stream Return the life quote stream for the specified financial instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="accept">Acceptiong stream type data</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request quotes</param>
        /// <param name="level">quote level to request (optional, default to best_price)</param>
        /// <returns>QuoteResponse</returns>
        public QuoteResponse GetQuoteStream (string version, string accept, string symbolIds, string level = null)
        {
             ApiResponse<QuoteResponse> localVarResponse = GetQuoteStreamWithHttpInfo(version, accept, symbolIds, level);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get quote stream Return the life quote stream for the specified financial instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="accept">Acceptiong stream type data</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request quotes</param>
        /// <param name="level">quote level to request (optional, default to best_price)</param>
        /// <returns>ApiResponse of QuoteResponse</returns>
        public ApiResponse< QuoteResponse > GetQuoteStreamWithHttpInfo (string version, string accept, string symbolIds, string level = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling LiveFeedAPIApi->GetQuoteStream");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling LiveFeedAPIApi->GetQuoteStream");
            // verify the required parameter 'symbolIds' is set
            if (symbolIds == null)
                throw new ApiException(400, "Missing required parameter 'symbolIds' when calling LiveFeedAPIApi->GetQuoteStream");

            var localVarPath = "/md/{version}/feed/{symbolIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (symbolIds != null) localVarPathParams.Add("symbolIds", this.Configuration.ApiClient.ParameterToString(symbolIds)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuoteStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QuoteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuoteResponse)));
        }

        /// <summary>
        /// get quote stream Return the life quote stream for the specified financial instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="accept">Acceptiong stream type data</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request quotes</param>
        /// <param name="level">quote level to request (optional, default to best_price)</param>
        /// <returns>Task of QuoteResponse</returns>
        public async System.Threading.Tasks.Task<QuoteResponse> GetQuoteStreamAsync (string version, string accept, string symbolIds, string level = null)
        {
             ApiResponse<QuoteResponse> localVarResponse = await GetQuoteStreamAsyncWithHttpInfo(version, accept, symbolIds, level);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get quote stream Return the life quote stream for the specified financial instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="accept">Acceptiong stream type data</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request quotes</param>
        /// <param name="level">quote level to request (optional, default to best_price)</param>
        /// <returns>Task of ApiResponse (QuoteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuoteResponse>> GetQuoteStreamAsyncWithHttpInfo (string version, string accept, string symbolIds, string level = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling LiveFeedAPIApi->GetQuoteStream");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling LiveFeedAPIApi->GetQuoteStream");
            // verify the required parameter 'symbolIds' is set
            if (symbolIds == null)
                throw new ApiException(400, "Missing required parameter 'symbolIds' when calling LiveFeedAPIApi->GetQuoteStream");

            var localVarPath = "/md/{version}/feed/{symbolIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (symbolIds != null) localVarPathParams.Add("symbolIds", this.Configuration.ApiClient.ParameterToString(symbolIds)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuoteStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QuoteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuoteResponse)));
        }

        /// <summary>
        /// get trades stream Return the trades stream for the specified financial instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="accept">Acceptiong stream type data</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request trades</param>
        /// <returns>List&lt;TradeResponse&gt;</returns>
        public List<TradeResponse> GetTradesStream (string version, string accept, string symbolIds)
        {
             ApiResponse<List<TradeResponse>> localVarResponse = GetTradesStreamWithHttpInfo(version, accept, symbolIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get trades stream Return the trades stream for the specified financial instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="accept">Acceptiong stream type data</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request trades</param>
        /// <returns>ApiResponse of List&lt;TradeResponse&gt;</returns>
        public ApiResponse< List<TradeResponse> > GetTradesStreamWithHttpInfo (string version, string accept, string symbolIds)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling LiveFeedAPIApi->GetTradesStream");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling LiveFeedAPIApi->GetTradesStream");
            // verify the required parameter 'symbolIds' is set
            if (symbolIds == null)
                throw new ApiException(400, "Missing required parameter 'symbolIds' when calling LiveFeedAPIApi->GetTradesStream");

            var localVarPath = "/md/{version}/feed/trades/{symbolIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (symbolIds != null) localVarPathParams.Add("symbolIds", this.Configuration.ApiClient.ParameterToString(symbolIds)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTradesStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TradeResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TradeResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TradeResponse>)));
        }

        /// <summary>
        /// get trades stream Return the trades stream for the specified financial instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="accept">Acceptiong stream type data</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request trades</param>
        /// <returns>Task of List&lt;TradeResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<TradeResponse>> GetTradesStreamAsync (string version, string accept, string symbolIds)
        {
             ApiResponse<List<TradeResponse>> localVarResponse = await GetTradesStreamAsyncWithHttpInfo(version, accept, symbolIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get trades stream Return the trades stream for the specified financial instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="accept">Acceptiong stream type data</param>
        /// <param name="symbolIds">financial instrument id or comma-delimited list of instruments to request trades</param>
        /// <returns>Task of ApiResponse (List&lt;TradeResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TradeResponse>>> GetTradesStreamAsyncWithHttpInfo (string version, string accept, string symbolIds)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling LiveFeedAPIApi->GetTradesStream");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling LiveFeedAPIApi->GetTradesStream");
            // verify the required parameter 'symbolIds' is set
            if (symbolIds == null)
                throw new ApiException(400, "Missing required parameter 'symbolIds' when calling LiveFeedAPIApi->GetTradesStream");

            var localVarPath = "/md/{version}/feed/trades/{symbolIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (symbolIds != null) localVarPathParams.Add("symbolIds", this.Configuration.ApiClient.ParameterToString(symbolIds)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTradesStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TradeResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TradeResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TradeResponse>)));
        }

    }
}
