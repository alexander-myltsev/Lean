/* 
 *  # API versions   We supports several API versions simultaneously:   - Current **stable** API version is 2.0, version 1.0 is deprecated.   - API version 3.0 is **under development** and subject to change. We plan to freeze this API version at the late 2020.  # Limitations   Current API has the following limitations:   - URL should not be longer than 2000 symbols   - Maximal order depth for both archive and active orders is limited   by settings (1000 by default)  # Authentication  Bridge offers two form of authentication:   - HTTP Basic auth   - [JWT token](https://jwt.io) auth, which can be used as both authorization header and query parameter. Only HS256   (HMAC-SHA256) signature algo is supported. `iss` claim is used to pass clientId, `sub` is for application id. For example,   build JWT from following parts:    header:    ```   { \"alg\": \"HS256\", \"typ\": \"JWT\" }   ```    payload:    ```   {     \"sub\": \"77b378e8-3a30-4f85-9017-e839501f7589\",     \"iss\": \"469a8180-51fb-408f-a1f0-c3775eeb6ade\",     \"iat\": 1481850484,     \"aud\": [       \"feed\",       \"symbols\",       \"ohlc\",       \"crossrates\"     ]   }   ```    base64-encoded and concatenated with dot:    ```   eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3N2IzNzhlOC0zYTMwLTRmODUtOTAxNy1lODM5NTAxZjc1ODkiLCJpc3MiOiI0NjlhODE4MC01MWZiLTQwOGYtYTFmMC1jMzc3NWVlYjZhZGUiLCJpYXQiOjE0ODE4NTA0ODQsImF1ZCI6WyJmZWVkIiwic3ltYm9scyIsIm9obGMiLCJjcm9zc3JhdGVzIl19   ```    and finally signed with shared secret:    ```   eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3N2IzNzhlOC0zYTMwLTRmODUtOTAxNy1lODM5NTAxZjc1ODkiLCJpc3MiOiI0NjlhODE4MC01MWZiLTQwOGYtYTFmMC1jMzc3NWVlYjZhZGUiLCJpYXQiOjE0ODE4NTA0ODQsImF1ZCI6WyJmZWVkIiwic3ltYm9scyIsIm9obGMiLCJjcm9zc3JhdGVzIl19.Byn6aPDoMnaQUSGMnnddj2rI-noP9cQwa8JLJswgNGk   ```  <security-definitions />       
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISymbolsAPIApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// get instruments by exchange
        /// </summary>
        /// <remarks>
        /// Return the requested exchange financial instruments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="exchangeId">exchange id to search instruments</param>
        /// <returns>List&lt;SymbolInfoResponse&gt;</returns>
        List<SymbolInfoResponse> GetExchangeSymbols (string version, string exchangeId);

        /// <summary>
        /// get instruments by exchange
        /// </summary>
        /// <remarks>
        /// Return the requested exchange financial instruments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="exchangeId">exchange id to search instruments</param>
        /// <returns>ApiResponse of List&lt;SymbolInfoResponse&gt;</returns>
        ApiResponse<List<SymbolInfoResponse>> GetExchangeSymbolsWithHttpInfo (string version, string exchangeId);
        /// <summary>
        /// get exchanges
        /// </summary>
        /// <remarks>
        /// Return list of exchanges
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>List&lt;ExchangeResponse&gt;</returns>
        List<ExchangeResponse> GetExchanges (string version);

        /// <summary>
        /// get exchanges
        /// </summary>
        /// <remarks>
        /// Return list of exchanges
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>ApiResponse of List&lt;ExchangeResponse&gt;</returns>
        ApiResponse<List<ExchangeResponse>> GetExchangesWithHttpInfo (string version);
        /// <summary>
        /// get nearest expiration in group
        /// </summary>
        /// <remarks>
        /// Return financial instrument which has the nearest expiration in the group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="groupId">group id to search instruments</param>
        /// <returns>SymbolInfoResponse</returns>
        SymbolInfoResponse GetGroupNearestSymbol (string version, string groupId);

        /// <summary>
        /// get nearest expiration in group
        /// </summary>
        /// <remarks>
        /// Return financial instrument which has the nearest expiration in the group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="groupId">group id to search instruments</param>
        /// <returns>ApiResponse of SymbolInfoResponse</returns>
        ApiResponse<SymbolInfoResponse> GetGroupNearestSymbolWithHttpInfo (string version, string groupId);
        /// <summary>
        /// get instruments by group
        /// </summary>
        /// <remarks>
        /// Return financial instruments which belong to specified group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="groupId">group id to search instruments</param>
        /// <returns>List&lt;SymbolInfoResponse&gt;</returns>
        List<SymbolInfoResponse> GetGroupSymbols (string version, string groupId);

        /// <summary>
        /// get instruments by group
        /// </summary>
        /// <remarks>
        /// Return financial instruments which belong to specified group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="groupId">group id to search instruments</param>
        /// <returns>ApiResponse of List&lt;SymbolInfoResponse&gt;</returns>
        ApiResponse<List<SymbolInfoResponse>> GetGroupSymbolsWithHttpInfo (string version, string groupId);
        /// <summary>
        /// get instrument groups
        /// </summary>
        /// <remarks>
        /// Return list of available instrument groups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>List&lt;GroupResponse&gt;</returns>
        List<GroupResponse> GetGroups (string version);

        /// <summary>
        /// get instrument groups
        /// </summary>
        /// <remarks>
        /// Return list of available instrument groups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>ApiResponse of List&lt;GroupResponse&gt;</returns>
        ApiResponse<List<GroupResponse>> GetGroupsWithHttpInfo (string version);
        /// <summary>
        /// get instrument
        /// </summary>
        /// <remarks>
        /// Return instrument available for authorized user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <returns>SymbolInfoResponse</returns>
        SymbolInfoResponse GetSymbol (string version, string symbolId);

        /// <summary>
        /// get instrument
        /// </summary>
        /// <remarks>
        /// Return instrument available for authorized user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <returns>ApiResponse of SymbolInfoResponse</returns>
        ApiResponse<SymbolInfoResponse> GetSymbolWithHttpInfo (string version, string symbolId);
        /// <summary>
        /// get instrument schedule
        /// </summary>
        /// <remarks>
        /// Return financial schedule for requested instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <param name="types">show available order types (optional)</param>
        /// <returns>ScheduleResponse</returns>
        ScheduleResponse GetSymbolSchedule (string version, string symbolId, bool? types = null);

        /// <summary>
        /// get instrument schedule
        /// </summary>
        /// <remarks>
        /// Return financial schedule for requested instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <param name="types">show available order types (optional)</param>
        /// <returns>ApiResponse of ScheduleResponse</returns>
        ApiResponse<ScheduleResponse> GetSymbolScheduleWithHttpInfo (string version, string symbolId, bool? types = null);
        /// <summary>
        /// get instrument specification
        /// </summary>
        /// <remarks>
        /// Return additional parameters for requested instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <returns>RequirementsResponse</returns>
        RequirementsResponse GetSymbolSpecification (string version, string symbolId);

        /// <summary>
        /// get instrument specification
        /// </summary>
        /// <remarks>
        /// Return additional parameters for requested instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <returns>ApiResponse of RequirementsResponse</returns>
        ApiResponse<RequirementsResponse> GetSymbolSpecificationWithHttpInfo (string version, string symbolId);
        /// <summary>
        /// get instrument list
        /// </summary>
        /// <remarks>
        /// Return list of instruments available for authorized user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>List&lt;SymbolInfoResponse&gt;</returns>
        List<SymbolInfoResponse> GetSymbols (string version);

        /// <summary>
        /// get instrument list
        /// </summary>
        /// <remarks>
        /// Return list of instruments available for authorized user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>ApiResponse of List&lt;SymbolInfoResponse&gt;</returns>
        ApiResponse<List<SymbolInfoResponse>> GetSymbolsWithHttpInfo (string version);
        /// <summary>
        /// get instruments by type
        /// </summary>
        /// <remarks>
        /// Return financial instruments of the requrested type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolType">type name to search instruments</param>
        /// <returns>List&lt;SymbolInfoResponse&gt;</returns>
        List<SymbolInfoResponse> GetTypeSymbols (string version, string symbolType);

        /// <summary>
        /// get instruments by type
        /// </summary>
        /// <remarks>
        /// Return financial instruments of the requrested type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolType">type name to search instruments</param>
        /// <returns>ApiResponse of List&lt;SymbolInfoResponse&gt;</returns>
        ApiResponse<List<SymbolInfoResponse>> GetTypeSymbolsWithHttpInfo (string version, string symbolType);
        /// <summary>
        /// get instrument types
        /// </summary>
        /// <remarks>
        /// Return list of known instrument types
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>List&lt;TypeDescriptor&gt;</returns>
        List<TypeDescriptor> GetTypes (string version);

        /// <summary>
        /// get instrument types
        /// </summary>
        /// <remarks>
        /// Return list of known instrument types
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>ApiResponse of List&lt;TypeDescriptor&gt;</returns>
        ApiResponse<List<TypeDescriptor>> GetTypesWithHttpInfo (string version);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// get instruments by exchange
        /// </summary>
        /// <remarks>
        /// Return the requested exchange financial instruments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="exchangeId">exchange id to search instruments</param>
        /// <returns>Task of List&lt;SymbolInfoResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SymbolInfoResponse>> GetExchangeSymbolsAsync (string version, string exchangeId);

        /// <summary>
        /// get instruments by exchange
        /// </summary>
        /// <remarks>
        /// Return the requested exchange financial instruments
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="exchangeId">exchange id to search instruments</param>
        /// <returns>Task of ApiResponse (List&lt;SymbolInfoResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SymbolInfoResponse>>> GetExchangeSymbolsAsyncWithHttpInfo (string version, string exchangeId);
        /// <summary>
        /// get exchanges
        /// </summary>
        /// <remarks>
        /// Return list of exchanges
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>Task of List&lt;ExchangeResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ExchangeResponse>> GetExchangesAsync (string version);

        /// <summary>
        /// get exchanges
        /// </summary>
        /// <remarks>
        /// Return list of exchanges
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>Task of ApiResponse (List&lt;ExchangeResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ExchangeResponse>>> GetExchangesAsyncWithHttpInfo (string version);
        /// <summary>
        /// get nearest expiration in group
        /// </summary>
        /// <remarks>
        /// Return financial instrument which has the nearest expiration in the group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="groupId">group id to search instruments</param>
        /// <returns>Task of SymbolInfoResponse</returns>
        System.Threading.Tasks.Task<SymbolInfoResponse> GetGroupNearestSymbolAsync (string version, string groupId);

        /// <summary>
        /// get nearest expiration in group
        /// </summary>
        /// <remarks>
        /// Return financial instrument which has the nearest expiration in the group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="groupId">group id to search instruments</param>
        /// <returns>Task of ApiResponse (SymbolInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SymbolInfoResponse>> GetGroupNearestSymbolAsyncWithHttpInfo (string version, string groupId);
        /// <summary>
        /// get instruments by group
        /// </summary>
        /// <remarks>
        /// Return financial instruments which belong to specified group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="groupId">group id to search instruments</param>
        /// <returns>Task of List&lt;SymbolInfoResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SymbolInfoResponse>> GetGroupSymbolsAsync (string version, string groupId);

        /// <summary>
        /// get instruments by group
        /// </summary>
        /// <remarks>
        /// Return financial instruments which belong to specified group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="groupId">group id to search instruments</param>
        /// <returns>Task of ApiResponse (List&lt;SymbolInfoResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SymbolInfoResponse>>> GetGroupSymbolsAsyncWithHttpInfo (string version, string groupId);
        /// <summary>
        /// get instrument groups
        /// </summary>
        /// <remarks>
        /// Return list of available instrument groups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>Task of List&lt;GroupResponse&gt;</returns>
        System.Threading.Tasks.Task<List<GroupResponse>> GetGroupsAsync (string version);

        /// <summary>
        /// get instrument groups
        /// </summary>
        /// <remarks>
        /// Return list of available instrument groups
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>Task of ApiResponse (List&lt;GroupResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupResponse>>> GetGroupsAsyncWithHttpInfo (string version);
        /// <summary>
        /// get instrument
        /// </summary>
        /// <remarks>
        /// Return instrument available for authorized user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <returns>Task of SymbolInfoResponse</returns>
        System.Threading.Tasks.Task<SymbolInfoResponse> GetSymbolAsync (string version, string symbolId);

        /// <summary>
        /// get instrument
        /// </summary>
        /// <remarks>
        /// Return instrument available for authorized user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <returns>Task of ApiResponse (SymbolInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SymbolInfoResponse>> GetSymbolAsyncWithHttpInfo (string version, string symbolId);
        /// <summary>
        /// get instrument schedule
        /// </summary>
        /// <remarks>
        /// Return financial schedule for requested instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <param name="types">show available order types (optional)</param>
        /// <returns>Task of ScheduleResponse</returns>
        System.Threading.Tasks.Task<ScheduleResponse> GetSymbolScheduleAsync (string version, string symbolId, bool? types = null);

        /// <summary>
        /// get instrument schedule
        /// </summary>
        /// <remarks>
        /// Return financial schedule for requested instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <param name="types">show available order types (optional)</param>
        /// <returns>Task of ApiResponse (ScheduleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduleResponse>> GetSymbolScheduleAsyncWithHttpInfo (string version, string symbolId, bool? types = null);
        /// <summary>
        /// get instrument specification
        /// </summary>
        /// <remarks>
        /// Return additional parameters for requested instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <returns>Task of RequirementsResponse</returns>
        System.Threading.Tasks.Task<RequirementsResponse> GetSymbolSpecificationAsync (string version, string symbolId);

        /// <summary>
        /// get instrument specification
        /// </summary>
        /// <remarks>
        /// Return additional parameters for requested instrument
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <returns>Task of ApiResponse (RequirementsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequirementsResponse>> GetSymbolSpecificationAsyncWithHttpInfo (string version, string symbolId);
        /// <summary>
        /// get instrument list
        /// </summary>
        /// <remarks>
        /// Return list of instruments available for authorized user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>Task of List&lt;SymbolInfoResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SymbolInfoResponse>> GetSymbolsAsync (string version);

        /// <summary>
        /// get instrument list
        /// </summary>
        /// <remarks>
        /// Return list of instruments available for authorized user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>Task of ApiResponse (List&lt;SymbolInfoResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SymbolInfoResponse>>> GetSymbolsAsyncWithHttpInfo (string version);
        /// <summary>
        /// get instruments by type
        /// </summary>
        /// <remarks>
        /// Return financial instruments of the requrested type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolType">type name to search instruments</param>
        /// <returns>Task of List&lt;SymbolInfoResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SymbolInfoResponse>> GetTypeSymbolsAsync (string version, string symbolType);

        /// <summary>
        /// get instruments by type
        /// </summary>
        /// <remarks>
        /// Return financial instruments of the requrested type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolType">type name to search instruments</param>
        /// <returns>Task of ApiResponse (List&lt;SymbolInfoResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SymbolInfoResponse>>> GetTypeSymbolsAsyncWithHttpInfo (string version, string symbolType);
        /// <summary>
        /// get instrument types
        /// </summary>
        /// <remarks>
        /// Return list of known instrument types
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>Task of List&lt;TypeDescriptor&gt;</returns>
        System.Threading.Tasks.Task<List<TypeDescriptor>> GetTypesAsync (string version);

        /// <summary>
        /// get instrument types
        /// </summary>
        /// <remarks>
        /// Return list of known instrument types
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>Task of ApiResponse (List&lt;TypeDescriptor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TypeDescriptor>>> GetTypesAsyncWithHttpInfo (string version);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SymbolsAPIApi : ISymbolsAPIApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolsAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SymbolsAPIApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolsAPIApi"/> class
        /// </summary>
        /// <returns></returns>
        public SymbolsAPIApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolsAPIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SymbolsAPIApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// get instruments by exchange Return the requested exchange financial instruments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="exchangeId">exchange id to search instruments</param>
        /// <returns>List&lt;SymbolInfoResponse&gt;</returns>
        public List<SymbolInfoResponse> GetExchangeSymbols (string version, string exchangeId)
        {
             ApiResponse<List<SymbolInfoResponse>> localVarResponse = GetExchangeSymbolsWithHttpInfo(version, exchangeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get instruments by exchange Return the requested exchange financial instruments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="exchangeId">exchange id to search instruments</param>
        /// <returns>ApiResponse of List&lt;SymbolInfoResponse&gt;</returns>
        public ApiResponse< List<SymbolInfoResponse> > GetExchangeSymbolsWithHttpInfo (string version, string exchangeId)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetExchangeSymbols");
            // verify the required parameter 'exchangeId' is set
            if (exchangeId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeId' when calling SymbolsAPIApi->GetExchangeSymbols");

            var localVarPath = "/md/{version}/exchanges/{exchangeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (exchangeId != null) localVarPathParams.Add("exchangeId", this.Configuration.ApiClient.ParameterToString(exchangeId)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExchangeSymbols", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SymbolInfoResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SymbolInfoResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SymbolInfoResponse>)));
        }

        /// <summary>
        /// get instruments by exchange Return the requested exchange financial instruments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="exchangeId">exchange id to search instruments</param>
        /// <returns>Task of List&lt;SymbolInfoResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SymbolInfoResponse>> GetExchangeSymbolsAsync (string version, string exchangeId)
        {
             ApiResponse<List<SymbolInfoResponse>> localVarResponse = await GetExchangeSymbolsAsyncWithHttpInfo(version, exchangeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get instruments by exchange Return the requested exchange financial instruments
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="exchangeId">exchange id to search instruments</param>
        /// <returns>Task of ApiResponse (List&lt;SymbolInfoResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SymbolInfoResponse>>> GetExchangeSymbolsAsyncWithHttpInfo (string version, string exchangeId)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetExchangeSymbols");
            // verify the required parameter 'exchangeId' is set
            if (exchangeId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeId' when calling SymbolsAPIApi->GetExchangeSymbols");

            var localVarPath = "/md/{version}/exchanges/{exchangeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (exchangeId != null) localVarPathParams.Add("exchangeId", this.Configuration.ApiClient.ParameterToString(exchangeId)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExchangeSymbols", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SymbolInfoResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SymbolInfoResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SymbolInfoResponse>)));
        }

        /// <summary>
        /// get exchanges Return list of exchanges
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>List&lt;ExchangeResponse&gt;</returns>
        public List<ExchangeResponse> GetExchanges (string version)
        {
             ApiResponse<List<ExchangeResponse>> localVarResponse = GetExchangesWithHttpInfo(version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get exchanges Return list of exchanges
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>ApiResponse of List&lt;ExchangeResponse&gt;</returns>
        public ApiResponse< List<ExchangeResponse> > GetExchangesWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetExchanges");

            var localVarPath = "/md/{version}/exchanges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExchanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExchangeResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExchangeResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExchangeResponse>)));
        }

        /// <summary>
        /// get exchanges Return list of exchanges
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>Task of List&lt;ExchangeResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ExchangeResponse>> GetExchangesAsync (string version)
        {
             ApiResponse<List<ExchangeResponse>> localVarResponse = await GetExchangesAsyncWithHttpInfo(version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get exchanges Return list of exchanges
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>Task of ApiResponse (List&lt;ExchangeResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ExchangeResponse>>> GetExchangesAsyncWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetExchanges");

            var localVarPath = "/md/{version}/exchanges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExchanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExchangeResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExchangeResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExchangeResponse>)));
        }

        /// <summary>
        /// get nearest expiration in group Return financial instrument which has the nearest expiration in the group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="groupId">group id to search instruments</param>
        /// <returns>SymbolInfoResponse</returns>
        public SymbolInfoResponse GetGroupNearestSymbol (string version, string groupId)
        {
             ApiResponse<SymbolInfoResponse> localVarResponse = GetGroupNearestSymbolWithHttpInfo(version, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get nearest expiration in group Return financial instrument which has the nearest expiration in the group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="groupId">group id to search instruments</param>
        /// <returns>ApiResponse of SymbolInfoResponse</returns>
        public ApiResponse< SymbolInfoResponse > GetGroupNearestSymbolWithHttpInfo (string version, string groupId)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetGroupNearestSymbol");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling SymbolsAPIApi->GetGroupNearestSymbol");

            var localVarPath = "/md/{version}/groups/{groupId}/nearest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupNearestSymbol", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SymbolInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SymbolInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SymbolInfoResponse)));
        }

        /// <summary>
        /// get nearest expiration in group Return financial instrument which has the nearest expiration in the group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="groupId">group id to search instruments</param>
        /// <returns>Task of SymbolInfoResponse</returns>
        public async System.Threading.Tasks.Task<SymbolInfoResponse> GetGroupNearestSymbolAsync (string version, string groupId)
        {
             ApiResponse<SymbolInfoResponse> localVarResponse = await GetGroupNearestSymbolAsyncWithHttpInfo(version, groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get nearest expiration in group Return financial instrument which has the nearest expiration in the group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="groupId">group id to search instruments</param>
        /// <returns>Task of ApiResponse (SymbolInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SymbolInfoResponse>> GetGroupNearestSymbolAsyncWithHttpInfo (string version, string groupId)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetGroupNearestSymbol");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling SymbolsAPIApi->GetGroupNearestSymbol");

            var localVarPath = "/md/{version}/groups/{groupId}/nearest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupNearestSymbol", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SymbolInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SymbolInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SymbolInfoResponse)));
        }

        /// <summary>
        /// get instruments by group Return financial instruments which belong to specified group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="groupId">group id to search instruments</param>
        /// <returns>List&lt;SymbolInfoResponse&gt;</returns>
        public List<SymbolInfoResponse> GetGroupSymbols (string version, string groupId)
        {
             ApiResponse<List<SymbolInfoResponse>> localVarResponse = GetGroupSymbolsWithHttpInfo(version, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get instruments by group Return financial instruments which belong to specified group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="groupId">group id to search instruments</param>
        /// <returns>ApiResponse of List&lt;SymbolInfoResponse&gt;</returns>
        public ApiResponse< List<SymbolInfoResponse> > GetGroupSymbolsWithHttpInfo (string version, string groupId)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetGroupSymbols");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling SymbolsAPIApi->GetGroupSymbols");

            var localVarPath = "/md/{version}/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupSymbols", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SymbolInfoResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SymbolInfoResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SymbolInfoResponse>)));
        }

        /// <summary>
        /// get instruments by group Return financial instruments which belong to specified group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="groupId">group id to search instruments</param>
        /// <returns>Task of List&lt;SymbolInfoResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SymbolInfoResponse>> GetGroupSymbolsAsync (string version, string groupId)
        {
             ApiResponse<List<SymbolInfoResponse>> localVarResponse = await GetGroupSymbolsAsyncWithHttpInfo(version, groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get instruments by group Return financial instruments which belong to specified group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="groupId">group id to search instruments</param>
        /// <returns>Task of ApiResponse (List&lt;SymbolInfoResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SymbolInfoResponse>>> GetGroupSymbolsAsyncWithHttpInfo (string version, string groupId)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetGroupSymbols");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling SymbolsAPIApi->GetGroupSymbols");

            var localVarPath = "/md/{version}/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupSymbols", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SymbolInfoResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SymbolInfoResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SymbolInfoResponse>)));
        }

        /// <summary>
        /// get instrument groups Return list of available instrument groups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>List&lt;GroupResponse&gt;</returns>
        public List<GroupResponse> GetGroups (string version)
        {
             ApiResponse<List<GroupResponse>> localVarResponse = GetGroupsWithHttpInfo(version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get instrument groups Return list of available instrument groups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>ApiResponse of List&lt;GroupResponse&gt;</returns>
        public ApiResponse< List<GroupResponse> > GetGroupsWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetGroups");

            var localVarPath = "/md/{version}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GroupResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupResponse>)));
        }

        /// <summary>
        /// get instrument groups Return list of available instrument groups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>Task of List&lt;GroupResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupResponse>> GetGroupsAsync (string version)
        {
             ApiResponse<List<GroupResponse>> localVarResponse = await GetGroupsAsyncWithHttpInfo(version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get instrument groups Return list of available instrument groups
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>Task of ApiResponse (List&lt;GroupResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GroupResponse>>> GetGroupsAsyncWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetGroups");

            var localVarPath = "/md/{version}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GroupResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupResponse>)));
        }

        /// <summary>
        /// get instrument Return instrument available for authorized user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <returns>SymbolInfoResponse</returns>
        public SymbolInfoResponse GetSymbol (string version, string symbolId)
        {
             ApiResponse<SymbolInfoResponse> localVarResponse = GetSymbolWithHttpInfo(version, symbolId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get instrument Return instrument available for authorized user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <returns>ApiResponse of SymbolInfoResponse</returns>
        public ApiResponse< SymbolInfoResponse > GetSymbolWithHttpInfo (string version, string symbolId)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetSymbol");
            // verify the required parameter 'symbolId' is set
            if (symbolId == null)
                throw new ApiException(400, "Missing required parameter 'symbolId' when calling SymbolsAPIApi->GetSymbol");

            var localVarPath = "/md/{version}/symbols/{symbolId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (symbolId != null) localVarPathParams.Add("symbolId", this.Configuration.ApiClient.ParameterToString(symbolId)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSymbol", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SymbolInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SymbolInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SymbolInfoResponse)));
        }

        /// <summary>
        /// get instrument Return instrument available for authorized user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <returns>Task of SymbolInfoResponse</returns>
        public async System.Threading.Tasks.Task<SymbolInfoResponse> GetSymbolAsync (string version, string symbolId)
        {
             ApiResponse<SymbolInfoResponse> localVarResponse = await GetSymbolAsyncWithHttpInfo(version, symbolId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get instrument Return instrument available for authorized user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <returns>Task of ApiResponse (SymbolInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SymbolInfoResponse>> GetSymbolAsyncWithHttpInfo (string version, string symbolId)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetSymbol");
            // verify the required parameter 'symbolId' is set
            if (symbolId == null)
                throw new ApiException(400, "Missing required parameter 'symbolId' when calling SymbolsAPIApi->GetSymbol");

            var localVarPath = "/md/{version}/symbols/{symbolId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (symbolId != null) localVarPathParams.Add("symbolId", this.Configuration.ApiClient.ParameterToString(symbolId)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSymbol", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SymbolInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SymbolInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SymbolInfoResponse)));
        }

        /// <summary>
        /// get instrument schedule Return financial schedule for requested instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <param name="types">show available order types (optional)</param>
        /// <returns>ScheduleResponse</returns>
        public ScheduleResponse GetSymbolSchedule (string version, string symbolId, bool? types = null)
        {
             ApiResponse<ScheduleResponse> localVarResponse = GetSymbolScheduleWithHttpInfo(version, symbolId, types);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get instrument schedule Return financial schedule for requested instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <param name="types">show available order types (optional)</param>
        /// <returns>ApiResponse of ScheduleResponse</returns>
        public ApiResponse< ScheduleResponse > GetSymbolScheduleWithHttpInfo (string version, string symbolId, bool? types = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetSymbolSchedule");
            // verify the required parameter 'symbolId' is set
            if (symbolId == null)
                throw new ApiException(400, "Missing required parameter 'symbolId' when calling SymbolsAPIApi->GetSymbolSchedule");

            var localVarPath = "/md/{version}/symbols/{symbolId}/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (symbolId != null) localVarPathParams.Add("symbolId", this.Configuration.ApiClient.ParameterToString(symbolId)); // path parameter
            if (types != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "types", types)); // query parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSymbolSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ScheduleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduleResponse)));
        }

        /// <summary>
        /// get instrument schedule Return financial schedule for requested instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <param name="types">show available order types (optional)</param>
        /// <returns>Task of ScheduleResponse</returns>
        public async System.Threading.Tasks.Task<ScheduleResponse> GetSymbolScheduleAsync (string version, string symbolId, bool? types = null)
        {
             ApiResponse<ScheduleResponse> localVarResponse = await GetSymbolScheduleAsyncWithHttpInfo(version, symbolId, types);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get instrument schedule Return financial schedule for requested instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <param name="types">show available order types (optional)</param>
        /// <returns>Task of ApiResponse (ScheduleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScheduleResponse>> GetSymbolScheduleAsyncWithHttpInfo (string version, string symbolId, bool? types = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetSymbolSchedule");
            // verify the required parameter 'symbolId' is set
            if (symbolId == null)
                throw new ApiException(400, "Missing required parameter 'symbolId' when calling SymbolsAPIApi->GetSymbolSchedule");

            var localVarPath = "/md/{version}/symbols/{symbolId}/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (symbolId != null) localVarPathParams.Add("symbolId", this.Configuration.ApiClient.ParameterToString(symbolId)); // path parameter
            if (types != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "types", types)); // query parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSymbolSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ScheduleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduleResponse)));
        }

        /// <summary>
        /// get instrument specification Return additional parameters for requested instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <returns>RequirementsResponse</returns>
        public RequirementsResponse GetSymbolSpecification (string version, string symbolId)
        {
             ApiResponse<RequirementsResponse> localVarResponse = GetSymbolSpecificationWithHttpInfo(version, symbolId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get instrument specification Return additional parameters for requested instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <returns>ApiResponse of RequirementsResponse</returns>
        public ApiResponse< RequirementsResponse > GetSymbolSpecificationWithHttpInfo (string version, string symbolId)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetSymbolSpecification");
            // verify the required parameter 'symbolId' is set
            if (symbolId == null)
                throw new ApiException(400, "Missing required parameter 'symbolId' when calling SymbolsAPIApi->GetSymbolSpecification");

            var localVarPath = "/md/{version}/symbols/{symbolId}/specification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (symbolId != null) localVarPathParams.Add("symbolId", this.Configuration.ApiClient.ParameterToString(symbolId)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSymbolSpecification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RequirementsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RequirementsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RequirementsResponse)));
        }

        /// <summary>
        /// get instrument specification Return additional parameters for requested instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <returns>Task of RequirementsResponse</returns>
        public async System.Threading.Tasks.Task<RequirementsResponse> GetSymbolSpecificationAsync (string version, string symbolId)
        {
             ApiResponse<RequirementsResponse> localVarResponse = await GetSymbolSpecificationAsyncWithHttpInfo(version, symbolId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get instrument specification Return additional parameters for requested instrument
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolId">instrument id to search</param>
        /// <returns>Task of ApiResponse (RequirementsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RequirementsResponse>> GetSymbolSpecificationAsyncWithHttpInfo (string version, string symbolId)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetSymbolSpecification");
            // verify the required parameter 'symbolId' is set
            if (symbolId == null)
                throw new ApiException(400, "Missing required parameter 'symbolId' when calling SymbolsAPIApi->GetSymbolSpecification");

            var localVarPath = "/md/{version}/symbols/{symbolId}/specification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (symbolId != null) localVarPathParams.Add("symbolId", this.Configuration.ApiClient.ParameterToString(symbolId)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSymbolSpecification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RequirementsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RequirementsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RequirementsResponse)));
        }

        /// <summary>
        /// get instrument list Return list of instruments available for authorized user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>List&lt;SymbolInfoResponse&gt;</returns>
        public List<SymbolInfoResponse> GetSymbols (string version)
        {
             ApiResponse<List<SymbolInfoResponse>> localVarResponse = GetSymbolsWithHttpInfo(version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get instrument list Return list of instruments available for authorized user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>ApiResponse of List&lt;SymbolInfoResponse&gt;</returns>
        public ApiResponse< List<SymbolInfoResponse> > GetSymbolsWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetSymbols");

            var localVarPath = "/md/{version}/symbols";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSymbols", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SymbolInfoResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SymbolInfoResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SymbolInfoResponse>)));
        }

        /// <summary>
        /// get instrument list Return list of instruments available for authorized user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>Task of List&lt;SymbolInfoResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SymbolInfoResponse>> GetSymbolsAsync (string version)
        {
             ApiResponse<List<SymbolInfoResponse>> localVarResponse = await GetSymbolsAsyncWithHttpInfo(version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get instrument list Return list of instruments available for authorized user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>Task of ApiResponse (List&lt;SymbolInfoResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SymbolInfoResponse>>> GetSymbolsAsyncWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetSymbols");

            var localVarPath = "/md/{version}/symbols";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSymbols", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SymbolInfoResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SymbolInfoResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SymbolInfoResponse>)));
        }

        /// <summary>
        /// get instruments by type Return financial instruments of the requrested type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolType">type name to search instruments</param>
        /// <returns>List&lt;SymbolInfoResponse&gt;</returns>
        public List<SymbolInfoResponse> GetTypeSymbols (string version, string symbolType)
        {
             ApiResponse<List<SymbolInfoResponse>> localVarResponse = GetTypeSymbolsWithHttpInfo(version, symbolType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get instruments by type Return financial instruments of the requrested type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolType">type name to search instruments</param>
        /// <returns>ApiResponse of List&lt;SymbolInfoResponse&gt;</returns>
        public ApiResponse< List<SymbolInfoResponse> > GetTypeSymbolsWithHttpInfo (string version, string symbolType)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetTypeSymbols");
            // verify the required parameter 'symbolType' is set
            if (symbolType == null)
                throw new ApiException(400, "Missing required parameter 'symbolType' when calling SymbolsAPIApi->GetTypeSymbols");

            var localVarPath = "/md/{version}/types/{symbolType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (symbolType != null) localVarPathParams.Add("symbolType", this.Configuration.ApiClient.ParameterToString(symbolType)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTypeSymbols", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SymbolInfoResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SymbolInfoResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SymbolInfoResponse>)));
        }

        /// <summary>
        /// get instruments by type Return financial instruments of the requrested type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolType">type name to search instruments</param>
        /// <returns>Task of List&lt;SymbolInfoResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SymbolInfoResponse>> GetTypeSymbolsAsync (string version, string symbolType)
        {
             ApiResponse<List<SymbolInfoResponse>> localVarResponse = await GetTypeSymbolsAsyncWithHttpInfo(version, symbolType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get instruments by type Return financial instruments of the requrested type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="symbolType">type name to search instruments</param>
        /// <returns>Task of ApiResponse (List&lt;SymbolInfoResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SymbolInfoResponse>>> GetTypeSymbolsAsyncWithHttpInfo (string version, string symbolType)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetTypeSymbols");
            // verify the required parameter 'symbolType' is set
            if (symbolType == null)
                throw new ApiException(400, "Missing required parameter 'symbolType' when calling SymbolsAPIApi->GetTypeSymbols");

            var localVarPath = "/md/{version}/types/{symbolType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (symbolType != null) localVarPathParams.Add("symbolType", this.Configuration.ApiClient.ParameterToString(symbolType)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTypeSymbols", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SymbolInfoResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SymbolInfoResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SymbolInfoResponse>)));
        }

        /// <summary>
        /// get instrument types Return list of known instrument types
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>List&lt;TypeDescriptor&gt;</returns>
        public List<TypeDescriptor> GetTypes (string version)
        {
             ApiResponse<List<TypeDescriptor>> localVarResponse = GetTypesWithHttpInfo(version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get instrument types Return list of known instrument types
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>ApiResponse of List&lt;TypeDescriptor&gt;</returns>
        public ApiResponse< List<TypeDescriptor> > GetTypesWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetTypes");

            var localVarPath = "/md/{version}/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeDescriptor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TypeDescriptor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeDescriptor>)));
        }

        /// <summary>
        /// get instrument types Return list of known instrument types
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>Task of List&lt;TypeDescriptor&gt;</returns>
        public async System.Threading.Tasks.Task<List<TypeDescriptor>> GetTypesAsync (string version)
        {
             ApiResponse<List<TypeDescriptor>> localVarResponse = await GetTypesAsyncWithHttpInfo(version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get instrument types Return list of known instrument types
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <returns>Task of ApiResponse (List&lt;TypeDescriptor&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TypeDescriptor>>> GetTypesAsyncWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling SymbolsAPIApi->GetTypes");

            var localVarPath = "/md/{version}/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            // authentication (basic auth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (jwt token header) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (jwt token query) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TypeDescriptor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TypeDescriptor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TypeDescriptor>)));
        }

    }
}
