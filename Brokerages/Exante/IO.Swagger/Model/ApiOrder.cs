/* 
 *  # API versions   We supports several API versions simultaneously:   - Current **stable** API version is 2.0, version 1.0 is deprecated.   - API version 3.0 is **under development** and subject to change. We plan to freeze this API version at the late 2020.  # Limitations   Current API has the following limitations:   - URL should not be longer than 2000 symbols   - Maximal order depth for both archive and active orders is limited   by settings (1000 by default)  # Authentication  Bridge offers two form of authentication:   - HTTP Basic auth   - [JWT token](https://jwt.io) auth, which can be used as both authorization header and query parameter. Only HS256   (HMAC-SHA256) signature algo is supported. `iss` claim is used to pass clientId, `sub` is for application id. For example,   build JWT from following parts:    header:    ```   { \"alg\": \"HS256\", \"typ\": \"JWT\" }   ```    payload:    ```   {     \"sub\": \"77b378e8-3a30-4f85-9017-e839501f7589\",     \"iss\": \"469a8180-51fb-408f-a1f0-c3775eeb6ade\",     \"iat\": 1481850484,     \"aud\": [       \"feed\",       \"symbols\",       \"ohlc\",       \"crossrates\"     ]   }   ```    base64-encoded and concatenated with dot:    ```   eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3N2IzNzhlOC0zYTMwLTRmODUtOTAxNy1lODM5NTAxZjc1ODkiLCJpc3MiOiI0NjlhODE4MC01MWZiLTQwOGYtYTFmMC1jMzc3NWVlYjZhZGUiLCJpYXQiOjE0ODE4NTA0ODQsImF1ZCI6WyJmZWVkIiwic3ltYm9scyIsIm9obGMiLCJjcm9zc3JhdGVzIl19   ```    and finally signed with shared secret:    ```   eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3N2IzNzhlOC0zYTMwLTRmODUtOTAxNy1lODM5NTAxZjc1ODkiLCJpc3MiOiI0NjlhODE4MC01MWZiLTQwOGYtYTFmMC1jMzc3NWVlYjZhZGUiLCJpYXQiOjE0ODE4NTA0ODQsImF1ZCI6WyJmZWVkIiwic3ltYm9scyIsIm9obGMiLCJjcm9zc3JhdGVzIl19.Byn6aPDoMnaQUSGMnnddj2rI-noP9cQwa8JLJswgNGk   ```  <security-definitions />       
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// order response
    /// </summary>
    [DataContract]
        public partial class ApiOrder :  IEquatable<ApiOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiOrder" /> class.
        /// </summary>
        /// <param name="id">unique order ID, required api 2.0 only (required).</param>
        /// <param name="currentModificationId">current order modification unique ID (required).</param>
        /// <param name="placeTime">order place time (required).</param>
        /// <param name="username">associated name.</param>
        /// <param name="orderId">unique order ID, required api 3.0 only (required).</param>
        /// <param name="orderState">orderState (required).</param>
        /// <param name="orderParameters">orderParameters (required).</param>
        /// <param name="clientTag">optional client tag to identify or group orders.</param>
        /// <param name="accountId">associated account ID (required).</param>
        public ApiOrder(string id = default(string), string currentModificationId = default(string), DateTime? placeTime = default(DateTime?), string username = default(string), string orderId = default(string), OrderState orderState = default(OrderState), OrderParameters orderParameters = default(OrderParameters), string clientTag = default(string), string accountId = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ApiOrder and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "currentModificationId" is required (not null)
            if (currentModificationId == null)
            {
                throw new InvalidDataException("currentModificationId is a required property for ApiOrder and cannot be null");
            }
            else
            {
                this.CurrentModificationId = currentModificationId;
            }
            // to ensure "placeTime" is required (not null)
            if (placeTime == null)
            {
                throw new InvalidDataException("placeTime is a required property for ApiOrder and cannot be null");
            }
            else
            {
                this.PlaceTime = placeTime;
            }
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new InvalidDataException("orderId is a required property for ApiOrder and cannot be null");
            }
            else
            {
                this.OrderId = orderId;
            }
            // to ensure "orderState" is required (not null)
            if (orderState == null)
            {
                throw new InvalidDataException("orderState is a required property for ApiOrder and cannot be null");
            }
            else
            {
                this.OrderState = orderState;
            }
            // to ensure "orderParameters" is required (not null)
            if (orderParameters == null)
            {
                throw new InvalidDataException("orderParameters is a required property for ApiOrder and cannot be null");
            }
            else
            {
                this.OrderParameters = orderParameters;
            }
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new InvalidDataException("accountId is a required property for ApiOrder and cannot be null");
            }
            else
            {
                this.AccountId = accountId;
            }
            this.Username = username;
            this.ClientTag = clientTag;
        }
        
        /// <summary>
        /// unique order ID, required api 2.0 only
        /// </summary>
        /// <value>unique order ID, required api 2.0 only</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// current order modification unique ID
        /// </summary>
        /// <value>current order modification unique ID</value>
        [DataMember(Name="currentModificationId", EmitDefaultValue=false)]
        public string CurrentModificationId { get; set; }

        /// <summary>
        /// order place time
        /// </summary>
        /// <value>order place time</value>
        [DataMember(Name="placeTime", EmitDefaultValue=false)]
        public DateTime? PlaceTime { get; set; }

        /// <summary>
        /// associated name
        /// </summary>
        /// <value>associated name</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// unique order ID, required api 3.0 only
        /// </summary>
        /// <value>unique order ID, required api 3.0 only</value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets OrderState
        /// </summary>
        [DataMember(Name="orderState", EmitDefaultValue=false)]
        public OrderState OrderState { get; set; }

        /// <summary>
        /// Gets or Sets OrderParameters
        /// </summary>
        [DataMember(Name="orderParameters", EmitDefaultValue=false)]
        public OrderParameters OrderParameters { get; set; }

        /// <summary>
        /// optional client tag to identify or group orders
        /// </summary>
        /// <value>optional client tag to identify or group orders</value>
        [DataMember(Name="clientTag", EmitDefaultValue=false)]
        public string ClientTag { get; set; }

        /// <summary>
        /// associated account ID
        /// </summary>
        /// <value>associated account ID</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiOrder {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CurrentModificationId: ").Append(CurrentModificationId).Append("\n");
            sb.Append("  PlaceTime: ").Append(PlaceTime).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderState: ").Append(OrderState).Append("\n");
            sb.Append("  OrderParameters: ").Append(OrderParameters).Append("\n");
            sb.Append("  ClientTag: ").Append(ClientTag).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiOrder);
        }

        /// <summary>
        /// Returns true if ApiOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CurrentModificationId == input.CurrentModificationId ||
                    (this.CurrentModificationId != null &&
                    this.CurrentModificationId.Equals(input.CurrentModificationId))
                ) && 
                (
                    this.PlaceTime == input.PlaceTime ||
                    (this.PlaceTime != null &&
                    this.PlaceTime.Equals(input.PlaceTime))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.OrderState == input.OrderState ||
                    (this.OrderState != null &&
                    this.OrderState.Equals(input.OrderState))
                ) && 
                (
                    this.OrderParameters == input.OrderParameters ||
                    (this.OrderParameters != null &&
                    this.OrderParameters.Equals(input.OrderParameters))
                ) && 
                (
                    this.ClientTag == input.ClientTag ||
                    (this.ClientTag != null &&
                    this.ClientTag.Equals(input.ClientTag))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CurrentModificationId != null)
                    hashCode = hashCode * 59 + this.CurrentModificationId.GetHashCode();
                if (this.PlaceTime != null)
                    hashCode = hashCode * 59 + this.PlaceTime.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.OrderState != null)
                    hashCode = hashCode * 59 + this.OrderState.GetHashCode();
                if (this.OrderParameters != null)
                    hashCode = hashCode * 59 + this.OrderParameters.GetHashCode();
                if (this.ClientTag != null)
                    hashCode = hashCode * 59 + this.ClientTag.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
