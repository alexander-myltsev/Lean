/* 
 *  # API versions   We supports several API versions simultaneously:   - Current **stable** API version is 2.0, version 1.0 is deprecated.   - API version 3.0 is **under development** and subject to change. We plan to freeze this API version at the late 2020.  # Limitations   Current API has the following limitations:   - URL should not be longer than 2000 symbols   - Maximal order depth for both archive and active orders is limited   by settings (1000 by default)  # Authentication  Bridge offers two form of authentication:   - HTTP Basic auth   - [JWT token](https://jwt.io) auth, which can be used as both authorization header and query parameter. Only HS256   (HMAC-SHA256) signature algo is supported. `iss` claim is used to pass clientId, `sub` is for application id. For example,   build JWT from following parts:    header:    ```   { \"alg\": \"HS256\", \"typ\": \"JWT\" }   ```    payload:    ```   {     \"sub\": \"77b378e8-3a30-4f85-9017-e839501f7589\",     \"iss\": \"469a8180-51fb-408f-a1f0-c3775eeb6ade\",     \"iat\": 1481850484,     \"aud\": [       \"feed\",       \"symbols\",       \"ohlc\",       \"crossrates\"     ]   }   ```    base64-encoded and concatenated with dot:    ```   eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3N2IzNzhlOC0zYTMwLTRmODUtOTAxNy1lODM5NTAxZjc1ODkiLCJpc3MiOiI0NjlhODE4MC01MWZiLTQwOGYtYTFmMC1jMzc3NWVlYjZhZGUiLCJpYXQiOjE0ODE4NTA0ODQsImF1ZCI6WyJmZWVkIiwic3ltYm9scyIsIm9obGMiLCJjcm9zc3JhdGVzIl19   ```    and finally signed with shared secret:    ```   eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3N2IzNzhlOC0zYTMwLTRmODUtOTAxNy1lODM5NTAxZjc1ODkiLCJpc3MiOiI0NjlhODE4MC01MWZiLTQwOGYtYTFmMC1jMzc3NWVlYjZhZGUiLCJpYXQiOjE0ODE4NTA0ODQsImF1ZCI6WyJmZWVkIiwic3ltYm9scyIsIm9obGMiLCJjcm9zc3JhdGVzIl19.Byn6aPDoMnaQUSGMnnddj2rI-noP9cQwa8JLJswgNGk   ```  <security-definitions />       
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// option specific properties
    /// </summary>
    [DataContract]
        public partial class OptionDataResponse :  IEquatable<OptionDataResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionDataResponse" /> class.
        /// </summary>
        /// <param name="optionGroupId">option group name (required).</param>
        /// <param name="right">option right, required api 2.0 only (required).</param>
        /// <param name="strikePrice">option strike price (required).</param>
        /// <param name="optionRight">option right, required api 3.0 only (required).</param>
        public OptionDataResponse(string optionGroupId = default(string), string right = default(string), string strikePrice = default(string), string optionRight = default(string))
        {
            // to ensure "optionGroupId" is required (not null)
            if (optionGroupId == null)
            {
                throw new InvalidDataException("optionGroupId is a required property for OptionDataResponse and cannot be null");
            }
            else
            {
                this.OptionGroupId = optionGroupId;
            }
            // to ensure "right" is required (not null)
            if (right == null)
            {
                throw new InvalidDataException("right is a required property for OptionDataResponse and cannot be null");
            }
            else
            {
                this.Right = right;
            }
            // to ensure "strikePrice" is required (not null)
            if (strikePrice == null)
            {
                throw new InvalidDataException("strikePrice is a required property for OptionDataResponse and cannot be null");
            }
            else
            {
                this.StrikePrice = strikePrice;
            }
            // to ensure "optionRight" is required (not null)
            if (optionRight == null)
            {
                throw new InvalidDataException("optionRight is a required property for OptionDataResponse and cannot be null");
            }
            else
            {
                this.OptionRight = optionRight;
            }
        }
        
        /// <summary>
        /// option group name
        /// </summary>
        /// <value>option group name</value>
        [DataMember(Name="optionGroupId", EmitDefaultValue=false)]
        public string OptionGroupId { get; set; }

        /// <summary>
        /// option right, required api 2.0 only
        /// </summary>
        /// <value>option right, required api 2.0 only</value>
        [DataMember(Name="right", EmitDefaultValue=false)]
        public string Right { get; set; }

        /// <summary>
        /// option strike price
        /// </summary>
        /// <value>option strike price</value>
        [DataMember(Name="strikePrice", EmitDefaultValue=false)]
        public string StrikePrice { get; set; }

        /// <summary>
        /// option right, required api 3.0 only
        /// </summary>
        /// <value>option right, required api 3.0 only</value>
        [DataMember(Name="optionRight", EmitDefaultValue=false)]
        public string OptionRight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OptionDataResponse {\n");
            sb.Append("  OptionGroupId: ").Append(OptionGroupId).Append("\n");
            sb.Append("  Right: ").Append(Right).Append("\n");
            sb.Append("  StrikePrice: ").Append(StrikePrice).Append("\n");
            sb.Append("  OptionRight: ").Append(OptionRight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptionDataResponse);
        }

        /// <summary>
        /// Returns true if OptionDataResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of OptionDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptionDataResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OptionGroupId == input.OptionGroupId ||
                    (this.OptionGroupId != null &&
                    this.OptionGroupId.Equals(input.OptionGroupId))
                ) && 
                (
                    this.Right == input.Right ||
                    (this.Right != null &&
                    this.Right.Equals(input.Right))
                ) && 
                (
                    this.StrikePrice == input.StrikePrice ||
                    (this.StrikePrice != null &&
                    this.StrikePrice.Equals(input.StrikePrice))
                ) && 
                (
                    this.OptionRight == input.OptionRight ||
                    (this.OptionRight != null &&
                    this.OptionRight.Equals(input.OptionRight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OptionGroupId != null)
                    hashCode = hashCode * 59 + this.OptionGroupId.GetHashCode();
                if (this.Right != null)
                    hashCode = hashCode * 59 + this.Right.GetHashCode();
                if (this.StrikePrice != null)
                    hashCode = hashCode * 59 + this.StrikePrice.GetHashCode();
                if (this.OptionRight != null)
                    hashCode = hashCode * 59 + this.OptionRight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
