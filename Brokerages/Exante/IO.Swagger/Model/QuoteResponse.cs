/* 
 *  # API versions   We supports several API versions simultaneously:   - Current **stable** API version is 2.0, version 1.0 is deprecated.   - API version 3.0 is **under development** and subject to change. We plan to freeze this API version at the late 2020.  # Limitations   Current API has the following limitations:   - URL should not be longer than 2000 symbols   - Maximal order depth for both archive and active orders is limited   by settings (1000 by default)  # Authentication  Bridge offers two form of authentication:   - HTTP Basic auth   - [JWT token](https://jwt.io) auth, which can be used as both authorization header and query parameter. Only HS256   (HMAC-SHA256) signature algo is supported. `iss` claim is used to pass clientId, `sub` is for application id. For example,   build JWT from following parts:    header:    ```   { \"alg\": \"HS256\", \"typ\": \"JWT\" }   ```    payload:    ```   {     \"sub\": \"77b378e8-3a30-4f85-9017-e839501f7589\",     \"iss\": \"469a8180-51fb-408f-a1f0-c3775eeb6ade\",     \"iat\": 1481850484,     \"aud\": [       \"feed\",       \"symbols\",       \"ohlc\",       \"crossrates\"     ]   }   ```    base64-encoded and concatenated with dot:    ```   eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3N2IzNzhlOC0zYTMwLTRmODUtOTAxNy1lODM5NTAxZjc1ODkiLCJpc3MiOiI0NjlhODE4MC01MWZiLTQwOGYtYTFmMC1jMzc3NWVlYjZhZGUiLCJpYXQiOjE0ODE4NTA0ODQsImF1ZCI6WyJmZWVkIiwic3ltYm9scyIsIm9obGMiLCJjcm9zc3JhdGVzIl19   ```    and finally signed with shared secret:    ```   eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3N2IzNzhlOC0zYTMwLTRmODUtOTAxNy1lODM5NTAxZjc1ODkiLCJpc3MiOiI0NjlhODE4MC01MWZiLTQwOGYtYTFmMC1jMzc3NWVlYjZhZGUiLCJpYXQiOjE0ODE4NTA0ODQsImF1ZCI6WyJmZWVkIiwic3ltYm9scyIsIm9obGMiLCJjcm9zc3JhdGVzIl19.Byn6aPDoMnaQUSGMnnddj2rI-noP9cQwa8JLJswgNGk   ```  <security-definitions />       
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// QuoteResponse
    /// </summary>
    [DataContract]
        public partial class QuoteResponse :  IEquatable<QuoteResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteResponse" /> class.
        /// </summary>
        /// <param name="ask">array of ask levels according to requested feed level (required).</param>
        /// <param name="symbolId">financial instrument id (required).</param>
        /// <param name="timestamp">quote timestamp (required).</param>
        /// <param name="bid">array of bid levels according to requested feed level (required).</param>
        public QuoteResponse(List<QuoteSide> ask = default(List<QuoteSide>), string symbolId = default(string), decimal? timestamp = default(decimal?), List<QuoteSide> bid = default(List<QuoteSide>))
        {
            // to ensure "ask" is required (not null)
            if (ask == null)
            {
                throw new InvalidDataException("ask is a required property for QuoteResponse and cannot be null");
            }
            else
            {
                this.Ask = ask;
            }
            // to ensure "symbolId" is required (not null)
            if (symbolId == null)
            {
                throw new InvalidDataException("symbolId is a required property for QuoteResponse and cannot be null");
            }
            else
            {
                this.SymbolId = symbolId;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for QuoteResponse and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "bid" is required (not null)
            if (bid == null)
            {
                throw new InvalidDataException("bid is a required property for QuoteResponse and cannot be null");
            }
            else
            {
                this.Bid = bid;
            }
        }
        
        /// <summary>
        /// array of ask levels according to requested feed level
        /// </summary>
        /// <value>array of ask levels according to requested feed level</value>
        [DataMember(Name="ask", EmitDefaultValue=false)]
        public List<QuoteSide> Ask { get; set; }

        /// <summary>
        /// financial instrument id
        /// </summary>
        /// <value>financial instrument id</value>
        [DataMember(Name="symbolId", EmitDefaultValue=false)]
        public string SymbolId { get; set; }

        /// <summary>
        /// quote timestamp
        /// </summary>
        /// <value>quote timestamp</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public decimal? Timestamp { get; set; }

        /// <summary>
        /// array of bid levels according to requested feed level
        /// </summary>
        /// <value>array of bid levels according to requested feed level</value>
        [DataMember(Name="bid", EmitDefaultValue=false)]
        public List<QuoteSide> Bid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuoteResponse {\n");
            sb.Append("  Ask: ").Append(Ask).Append("\n");
            sb.Append("  SymbolId: ").Append(SymbolId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Bid: ").Append(Bid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuoteResponse);
        }

        /// <summary>
        /// Returns true if QuoteResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of QuoteResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuoteResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ask == input.Ask ||
                    this.Ask != null &&
                    input.Ask != null &&
                    this.Ask.SequenceEqual(input.Ask)
                ) && 
                (
                    this.SymbolId == input.SymbolId ||
                    (this.SymbolId != null &&
                    this.SymbolId.Equals(input.SymbolId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Bid == input.Bid ||
                    this.Bid != null &&
                    input.Bid != null &&
                    this.Bid.SequenceEqual(input.Bid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ask != null)
                    hashCode = hashCode * 59 + this.Ask.GetHashCode();
                if (this.SymbolId != null)
                    hashCode = hashCode * 59 + this.SymbolId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Bid != null)
                    hashCode = hashCode * 59 + this.Bid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
